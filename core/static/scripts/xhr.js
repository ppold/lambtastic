// Generated by CoffeeScript 1.6.2
(function() {
  define(['./promise'], function(Promise) {
    /*
     * XmlHTTPRequest abstraction that uses the promise pattern
     * @param  {String}     url     URL to request.
     * @param  {Object}     data    Data to send.
     * @param  {Dictionary} headers Headers to send.
     * @return {Promise}            A promise.
    */

    var add_script_tag, calls, generate_closure, get, jsonp, options, post, xhr;

    xhr = function(url, method, data, responseType, headers) {
      var handler, header, promise, request, value;

      handler = function(event) {
        if (request.readyState === 4) {
          request.removeEventListener(event.type, handler);
          return promise.resolve(request.response);
        }
      };
      promise = new Promise();
      request = new XMLHttpRequest();
      request.open(method, url);
      request.responseType = responseType;
      for (header in headers) {
        value = headers[header];
        request.setRequestHeader(header, value);
      }
      request.addEventListener('readystatechange', handler);
      request.send(data);
      return promise;
    };
    json = function(url) {
      return xhr(url, 'GET', null, 'json')
    };
    get = function(url, data, headers) {
      return xhr(url, 'GET', data, null, headers);
    };
    options = function(url, data, headers) {
      return xhr(url, 'OPTIONS', data, null, headers);
    };
    post = function(url, data, headers) {
      return xhr(url, 'POST', data, null, headers);
    };
    calls = 0;
    jsonp = function(url) {
      var callbackID, promise, script;

      promise = new Promise();
      callbackID = 'jsonp_callback' + (++calls);
      url += '&callback=' + callbackID;
      script = add_script_tag(url);
      window[callbackID] = generate_closure(callbackID, script, promise);
      return promise;
    };
    add_script_tag = function(url) {
      var head, script;

      head = document.getElementsByTagName('head')[0];
      script = document.createElement('script');
      script.async = true;
      script.type = 'application/javascript';
      script.src = url;
      head.appendChild(script);
      return script;
    };
    generate_closure = function(callbackID, script, promise) {
      return function(data) {
        script.parentNode.removeChild(script);
        promise.resolve(data);
        return delete window[callbackID];
      };
    };
    return {
      json: json,
      get: get,
      options: options,
      post: post,
      jsonp: jsonp
    };
  });

}).call(this);
